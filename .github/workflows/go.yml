name: Build and Test for All OS and Go Versions

on:
  push:
    branches:
      - prod
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        go-version: [ '1.21.x' ]

    steps:
      # 检出代码
      - name: Checkout Code
        uses: actions/checkout@v4

      # 设置 Go 环境
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      # 显示环境信息
      - name: Display Environment Info
        run: |
          echo "Operating System: ${{ matrix.os }}"
          echo "Go Version: $(go version)"

      # 缓存 Go 模块
      - name: Cache Go Modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-modules-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-modules-

      # 安装依赖
      - name: Install Dependencies
        run: go mod tidy

      # 构建项目
      - name: Build
        run: |
          go build -o build/main ./...
      
      # 在 Windows 下将构建结果打包
      - name: Archive Build (Windows Only)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          # Windows 上预装了 bsdtar，可直接使用 tar 命令
          tar -czvf build/windows_build.tar.gz ./build/main.exe

      # 在非 Windows 系统无需额外打包，只要确保 build 目录存在有可执行文件
      - name: Ensure Build Directory (Non-Windows)
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          # 已在 build 步骤中以 -o build/main 输出可执行文件，这里可视需要进行额外处理
          # 比如 Linux/macOS 下可执行文件默认为 build/main (无.exe扩展)
          ls build

      # 运行测试
      - name: Run Tests
        run: go test ./...

      # 上传构建产物
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.os }}-${{ matrix.go-version }}
          path: ./build
